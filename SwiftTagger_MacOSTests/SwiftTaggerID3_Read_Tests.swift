//
//  SwiftTagger_ID3_Read_Tests.swift
//  SwiftTagger_MacOSTests
//
//  Created by Nolaine Crusher on 4/21/20.
//  Copyright Â© 2020 Nolaine Crusher. All rights reserved.
//

import XCTest
import SwiftTagger_MacOS

class SwiftTagger_ID3_Read_Tests: XCTestCase {

    func testReadV22() throws {
        let mp3File = try Bundle.mp3V22()
        let tag = try mp3File.read()
        
        #warning("figure out why the last charcter is being dropped (probably because of weird encoding on the writing side)")
        XCTAssertEqual(tag.album, "Album")
        XCTAssertEqual(tag.albumArtist, "AlbumArtist")
        XCTAssertEqual(tag.artist, "Artist")
        XCTAssertEqual(tag.title, "Title")
        XCTAssertEqual(tag.discNumber.disc, 3)
        XCTAssertEqual(tag.discNumber.totalDiscs, 4)
        XCTAssertEqual(tag.trackNumber.track, 1)
        XCTAssertEqual(tag.trackNumber.totalTracks, 2)
        #warning("these shouldn't both be nil, genreDescription should be 'Genre'")
        XCTAssertEqual(tag.genre.genreName, nil)
        XCTAssertEqual(tag.genre.genreDescription, nil)
        XCTAssertEqual(tag.year,"2019")
        
    }

    func testReadV23() throws {
        let mp3File = try Bundle.mp3V23()
        let tag = try mp3File.read()

        XCTAssertEqual(tag.album, "Album")
        XCTAssertEqual(tag.albumArtist, "AlbumArtist")
        XCTAssertEqual(tag.albumSort, "SortAlbum")
        XCTAssertEqual(tag.albumArtistSort, "SortAlbumArtist")
        XCTAssertEqual(tag.artist, "Artist")
        XCTAssertEqual(tag.artistSort, "SortArtist")
        XCTAssertEqual(tag.artistWebpage, "http://artist.url")
        XCTAssertEqual(tag.arranger, "Arranger")
        XCTAssertEqual(tag.composer, "Composer")
        XCTAssertEqual(tag.composerSort, "SortComposer")
        XCTAssertEqual(tag.conductor, "Conductor")
        XCTAssertEqual(tag.contentGroup, "Grouping")
        XCTAssertEqual(tag.copyright, "Copyright")
        XCTAssertEqual(tag.encodedBy, "EncodedBy")
        XCTAssertEqual(tag.encodingSettings, "EncoderSettings")
        XCTAssertEqual(tag.fileOwner, "FileOwner")
        XCTAssertEqual(tag.initialKey, "b#")
        XCTAssertEqual(tag.lyricist, "Lyricist")
        XCTAssertEqual(tag.movementName, "MovementName")
        XCTAssertEqual(tag.originalAlbum, "OriginalAlbum")
        XCTAssertEqual(tag.originalArtist, "OriginalArtist")
        XCTAssertEqual(tag.originalFilename, "OriginalFilename")
        XCTAssertEqual(tag.originalLyricist, "OriginalLyricist")
        XCTAssertEqual(tag.publisher, "Publisher")
        XCTAssertEqual(tag.radioStation, "RadioStation")
        XCTAssertEqual(tag.radioStationOwner, "RadioStationOwner")
        XCTAssertEqual(tag.title, "Title")
        XCTAssertEqual(tag.titleSort, "SortTitle")
        XCTAssertEqual(tag.audioFileWebpage, "http://audiofile.url")
        XCTAssertEqual(tag.audioSourceWebpage, "http://audiosource.url")
        XCTAssertEqual(tag.copyrightWebpage, "http://copyright.url")
        XCTAssertEqual(tag.publisherWebpage, "http://publisher.url")
        XCTAssertEqual(tag.radioStationWebpage, "http://radiostation.url")
        XCTAssertEqual(tag.bpm, 99)
        XCTAssertEqual(tag.isrc, 123456789012)
        XCTAssertEqual(tag.length, 5250)
        XCTAssertEqual(tag.totalMovements, 6)
        XCTAssertEqual(tag.movementNumber, 0)
        XCTAssertEqual(tag.playlistDelay, 20)
        XCTAssertEqual(tag.compilation, true)
        XCTAssertEqual(tag.discNumber.disc, 3)
        XCTAssertEqual(tag.discNumber.totalDiscs, 4)
        XCTAssertEqual(tag.trackNumber.track, 1)
        XCTAssertEqual(tag.trackNumber.totalTracks, 2)
        XCTAssertEqual(tag.languages,["eng"])
        XCTAssertEqual(tag[userDefinedText: "UserText"], "User Defined Text Content")
        XCTAssertEqual(tag[userDefinedUrl: "UserDefinedURL"], "http://userdefined.url")
        XCTAssertEqual(tag.genre.genreName, "")
        XCTAssertEqual(tag.genre.genreDescription, "Test Genre")
        XCTAssertEqual(tag.mediaType.mediaType, nil)
        XCTAssertEqual(tag.mediaType.additionalMediaInfo, nil)
        XCTAssertEqual(tag.mediaType.mediaTypeDescription, "MediaType")
        XCTAssertEqual(tag[comments: "eng", "CommentDescription"], "Comment Content")
        XCTAssertEqual(tag[lyrics: "eng", "LyricsDesscription"], "Lyrics Content")
        XCTAssertEqual(tag.involvedPeopleList?[0].role, "Director")
        XCTAssertEqual(tag.involvedPeopleList?[0].person, "Director Name")
        XCTAssertEqual(tag.involvedPeopleList?[1].role, "Producer")
        XCTAssertEqual(tag.involvedPeopleList?[1].person, "Producer Name")
        XCTAssertEqual(tag.year,"2019")

    }

    func testReadV24() throws {
        let mp3File = try Bundle.mp3V24()
        let tag = try mp3File.read()
        
        XCTAssertEqual(tag.album, "Album")
        XCTAssertEqual(tag.albumArtist, "AlbumArtist")
        XCTAssertEqual(tag.albumSort, "SortAlbum")
        XCTAssertEqual(tag.albumArtistSort, "SortAlbumArtist")
        XCTAssertEqual(tag.artist, "Artist")
        XCTAssertEqual(tag.artistSort, "SortArtist")
        XCTAssertEqual(tag.artistWebpage, "http://artist.url")
        XCTAssertEqual(tag.arranger, "Arranger")
        XCTAssertEqual(tag.composer, "Composer")
        XCTAssertEqual(tag.composerSort, "SortComposer")
        XCTAssertEqual(tag.conductor, "Conductor")
        XCTAssertEqual(tag.contentGroup, "Grouping")
        XCTAssertEqual(tag.copyright, "Copyright")
        XCTAssertEqual(tag.encodedBy, "EncodedBy")
        XCTAssertEqual(tag.encodingSettings, "EncoderSettings")
        XCTAssertEqual(tag.fileOwner, "FileOwner")
        XCTAssertEqual(tag.initialKey, "b#")
        XCTAssertEqual(tag.lyricist, "Lyricist")
        XCTAssertEqual(tag.movementName, "MovementName")
        XCTAssertEqual(tag.originalAlbum, "OriginalAlbum")
        XCTAssertEqual(tag.originalArtist, "OriginalArtist")
        XCTAssertEqual(tag.originalFilename, "OriginalFilename")
        XCTAssertEqual(tag.originalLyricist, "OriginalLyricist")
        XCTAssertEqual(tag.publisher, "Publisher")
        XCTAssertEqual(tag.radioStation, "RadioStation")
        XCTAssertEqual(tag.radioStationOwner, "RadioStationOwner")
        XCTAssertEqual(tag.title, "Title")
        XCTAssertEqual(tag.titleSort, "SortTitle")
        XCTAssertEqual(tag.audioFileWebpage, "http://audiofile.url")
        XCTAssertEqual(tag.audioSourceWebpage, "http://audiosource.url")
        XCTAssertEqual(tag.copyrightWebpage, "http://copyright.url")
        XCTAssertEqual(tag.publisherWebpage, "http://publisher.url")
        XCTAssertEqual(tag.radioStationWebpage, "http://radiostation.url")
        XCTAssertEqual(tag.bpm, 99)
        XCTAssertEqual(tag.isrc, 123456789012)
        XCTAssertEqual(tag.length, 5250)
        XCTAssertEqual(tag.playlistDelay, 20)
        XCTAssertEqual(tag.compilation, true)
        XCTAssertEqual(tag.discNumber.disc, 3)
        XCTAssertEqual(tag.discNumber.totalDiscs, 4)
        XCTAssertEqual(tag.trackNumber.track, 1)
        XCTAssertEqual(tag.trackNumber.totalTracks, 2)
        XCTAssertEqual(tag.languages,["eng"])
        XCTAssertEqual(tag[userDefinedText: "UserText"], "User Defined Text Content")
        XCTAssertEqual(tag[userDefinedUrl: "UserDefinedUrl"], "http://userdefined.url")
        XCTAssertEqual(tag.genre.genreName, "")
        XCTAssertEqual(tag.genre.genreDescription, "Test Genre")
        XCTAssertEqual(tag.mediaType.mediaType, nil)
        XCTAssertEqual(tag.mediaType.additionalMediaInfo, nil)
        XCTAssertEqual(tag.mediaType.mediaTypeDescription, "MediaType")
        XCTAssertEqual(tag[comments: "eng", "CommentDescription"], "Comment Content")
        XCTAssertEqual(tag[lyrics: "eng", "LyricsDesscription"], "Lyrics Content")
        XCTAssertEqual(tag.involvedPeopleList?[0].role, "Director")
        XCTAssertEqual(tag.involvedPeopleList?[0].person, "Director Name")
        XCTAssertEqual(tag.involvedPeopleList?[1].role, "Producer")
        XCTAssertEqual(tag.involvedPeopleList?[1].person, "Producer Name")
        XCTAssertEqual(tag.musicianCreditList?[0].role,"Musician")
        XCTAssertEqual(tag.musicianCreditList?[0].person,"Musician Name")
        XCTAssertEqual(tag.musicianCreditList?[1].role, "Singer")
        XCTAssertEqual(tag.musicianCreditList?[1].person, "Singer Name")
        XCTAssertEqual(tag.releaseDateTime, "1999-05-08")
        XCTAssertEqual(tag.originalReleaseDate, "1998-03-04")
        XCTAssertEqual(tag.taggingDateTime, "1997-06-07")
        XCTAssertEqual(tag.mood, "Mood")
        XCTAssertEqual(tag.setSubtitle, "SetSubtitle")
        XCTAssertEqual(tag.producedNotice, "2020 ProducedNotice")
    }

    func testChapterReading() throws {
        let mp3File = try Bundle.mp3Chaptered()
        let tag = try mp3File.read()

        XCTAssertEqual(tag.album, "Album")
        XCTAssertEqual(tag.albumArtist, "AlbumArtist")
        XCTAssertEqual(tag.albumSort, "SortAlbum")
        XCTAssertEqual(tag.albumArtistSort, "SortAlbumArtist")
        XCTAssertEqual(tag.artist, "Artist")
        XCTAssertEqual(tag.artistSort, "SortArtist")
        XCTAssertEqual(tag.artistWebpage, "http://artist.url")
        XCTAssertEqual(tag.arranger, "Arranger")
        XCTAssertEqual(tag.composer, "Composer")
        XCTAssertEqual(tag.composerSort, "SortComposer")
        XCTAssertEqual(tag.conductor, "Conductor")
        XCTAssertEqual(tag.contentGroup, "Content Group")
        XCTAssertEqual(tag.copyright, "2020 Copyright")
        XCTAssertEqual(tag.encodedBy, "EncodedBy")
        XCTAssertEqual(tag.encodingSettings, "EncoderSettings")
        XCTAssertEqual(tag.fileOwner, "FileOwner")
        XCTAssertEqual(tag.initialKey, "b#")
        XCTAssertEqual(tag.lyricist, "Lyricist")
        XCTAssertEqual(tag.movementName, "MovementName")
        XCTAssertEqual(tag.originalAlbum, "OriginalAlbum")
        XCTAssertEqual(tag.originalArtist, "OriginalArtist")
        XCTAssertEqual(tag.originalFilename, "OriginalFilename")
        XCTAssertEqual(tag.originalLyricist, "OriginalLyricist")
        XCTAssertEqual(tag.publisher, "Publisher")
        XCTAssertEqual(tag.radioStation, "RadioStation")
        XCTAssertEqual(tag.radioStationOwner, "RadioStationOwner")
        XCTAssertEqual(tag.title, "Album")
        XCTAssertEqual(tag.titleSort, "SortTitle")
        XCTAssertEqual(tag.audioFileWebpage, "http://audiofile.url")
        XCTAssertEqual(tag.audioSourceWebpage, "http://audiosource.url")
        XCTAssertEqual(tag.copyrightWebpage, "http://copyright.url")
        XCTAssertEqual(tag.publisherWebpage, "http://publisher.url")
        XCTAssertEqual(tag.radioStationWebpage, "http://radiostation.url")
        XCTAssertEqual(tag.bpm, 99)
        XCTAssertEqual(tag.isrc, 123456789012)
        XCTAssertEqual(tag.length, 5250)
        XCTAssertEqual(tag.playlistDelay, 20)
        XCTAssertEqual(tag.compilation, true)
        XCTAssertEqual(tag.discNumber.disc, 3)
        XCTAssertEqual(tag.discNumber.totalDiscs, 4)
        XCTAssertEqual(tag.trackNumber.track, 1)
        XCTAssertEqual(tag.trackNumber.totalTracks, 2)
        XCTAssertEqual(tag.languages,["eng"])
        XCTAssertEqual(tag[userDefinedText: "UserDefinedText"], "User Defined Text Content")
        XCTAssertEqual(tag[userDefinedUrl: "UserDefinedUrl"], "http://userdefined.url")
        XCTAssertEqual(tag.genre.genreName, "")
        XCTAssertEqual(tag.genre.genreDescription, "Genre")
        XCTAssertEqual(tag.mediaType.mediaType, nil)
        XCTAssertEqual(tag.mediaType.additionalMediaInfo, nil)
        XCTAssertEqual(tag.mediaType.mediaTypeDescription, "MediaType")
        XCTAssertEqual(tag[comments: "eng", "CommentDescription"], "Comment Content")
        XCTAssertEqual(tag[lyrics: "eng", "LyricsDescription"], "Lyrics Content")
        XCTAssertEqual(tag.involvedPeopleList?[0].role, "Director")
        XCTAssertEqual(tag.involvedPeopleList?[0].person, "Director Name")
        XCTAssertEqual(tag.involvedPeopleList?[1].role, "Producer")
        XCTAssertEqual(tag.involvedPeopleList?[1].person, "Producer Name")
        XCTAssertEqual(tag.musicianCreditList?[0].role,"Musician")
        XCTAssertEqual(tag.musicianCreditList?[0].person,"Musician Name")
        XCTAssertEqual(tag.musicianCreditList?[1].role, "Singer")
        XCTAssertEqual(tag.musicianCreditList?[1].person, "Singer Name")
        XCTAssertEqual(tag.releaseDateTime, "1999-05-08")
        XCTAssertEqual(tag.originalReleaseDate, "1998-03-04")
        XCTAssertEqual(tag.taggingDateTime, "1997-06-07")
        XCTAssertEqual(tag.encodingDateTime, "1996-08-09")
        XCTAssertEqual(tag.mood, "Mood")
        XCTAssertEqual(tag.setSubtitle, "SetSubtitle")
        XCTAssertEqual(tag.producedNotice, "2020 ProducedNotice")
        XCTAssertEqual(tag[tableOfContents: "TOC"]?.entryCount, 2)
        XCTAssertEqual(tag[tableOfContents: "TOC"]?.topLevelFlag, true)
        XCTAssertEqual(tag[tableOfContents: "TOC"]?.orderedFlag, true)
        XCTAssertEqual(tag[tableOfContents: "TOC"]?.childElementIDs, ["ch0","ch1"])
        XCTAssertNil(tag[tableOfContents: "TOC"]?.embeddedSubframes.keys.first)
        XCTAssertNil(tag[tableOfContents: "TOC"]?.embeddedSubframes.values.first)
        XCTAssertEqual(tag[chapters: "ch0"]?.startTime, 0)
        XCTAssertEqual(tag[chapters: "ch0"]?.endTime, 2795)
        XCTAssertEqual(tag[chapters: "ch0"]?.startByteOffset,0)
        XCTAssertEqual(tag[chapters: "ch0"]?.endByteOffset,0)
        XCTAssertEqual(tag[chapters: "ch1"]?.startTime, 2795)
        XCTAssertEqual(tag[chapters: "ch1"]?.endTime, 5250)
        XCTAssertEqual(tag[chapters: "ch1"]?.startByteOffset,0)
        XCTAssertEqual(tag[chapters: "ch1"]?.endByteOffset,0)
        
        XCTAssertEqual(tag[embeddedSubframes: "ch0"]?.title, "Chapter 01")
        XCTAssertEqual(tag[embeddedSubframes: "ch1"]?.title, "Chapter 02")

        let outputURL = URL(fileURLWithPath: "/Users/nolainecrusher/Downloads/audiobook_tools/sampleaax/test/output.jpg")
        let coverImageData = tag[attachedPicture: "SampleCover"]
        try coverImageData?.write(to: outputURL)
    }
    
    
}
