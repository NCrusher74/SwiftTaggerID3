//
//  SwiftTagger_ID3_Read_Tests.swift
//  SwiftTagger_MacOSTests
//
//  Created by Nolaine Crusher on 4/21/20.
//  Copyright Â© 2020 Nolaine Crusher. All rights reserved.
//

import XCTest
import SwiftTagger_MacOS

class SwiftTagger_ID3_Read_Tests: XCTestCase {

    func testReadV22() throws {
        let mp3File = try Bundle.mp3V22()
        let tag = try mp3File.read()
        
        #warning("figure out why the last charcter is being dropped (probably because of weird encoding on the writing side)")
        XCTAssertEqual(tag.album, "Album")
        XCTAssertEqual(tag.albumArtist, "AlbumArtist")
//        XCTAssertEqual(tag.albumSort, "SortAlbum")
//        XCTAssertEqual(tag.albumArtistSort, "SortAlbumArtist")
        XCTAssertEqual(tag.artist, "Artist")
//        XCTAssertEqual(tag.artistSort, "SortArtist")
//        XCTAssertEqual(tag.artistWebpage, "http://artist.url")
//        XCTAssertEqual(tag.arranger, "Arranger")
//        XCTAssertEqual(tag.composer, "Composer")
//        XCTAssertEqual(tag.composerSort, "SortComposer")
//        XCTAssertEqual(tag.conductor, "Conductor")
//        XCTAssertEqual(tag.contentGroup, "Grouping")
//        XCTAssertEqual(tag.copyright, "Copyright")
//        XCTAssertEqual(tag.encodedBy, "EncodedBy")
//        XCTAssertEqual(tag.encodingSettings, "EncoderSettings")
//        XCTAssertEqual(tag.fileOwner, "FileOwner")
//        XCTAssertEqual(tag.initialKey, "b#")
//        XCTAssertEqual(tag.lyricist, "Lyricist")
//        XCTAssertEqual(tag.movementName, "MovementName")
//        XCTAssertEqual(tag.originalAlbum, "OriginalAlbum")
//        XCTAssertEqual(tag.originalArtist, "OriginalArtist")
//        XCTAssertEqual(tag.originalFilename, "OriginalFilename")
//        XCTAssertEqual(tag.originalLyricist, "OriginalLyricist")
//        XCTAssertEqual(tag.publisher, "Publisher")
//        XCTAssertEqual(tag.radioStation, "RadioStation")
//        XCTAssertEqual(tag.radioStationOwner, "RadioStationOwner")
        XCTAssertEqual(tag.title, "Title")
//        XCTAssertEqual(tag.titleSort, "SortTitle")
//        XCTAssertEqual(tag.audioFileWebpage, "http://audiofile.url")
//        XCTAssertEqual(tag.audioSourceWebpage, "http://audiosource.url")
//        XCTAssertEqual(tag.copyrightWebpage, "http://copyright.url")
//        XCTAssertEqual(tag.publisherWebpage, "http://publisher.url")
//        XCTAssertEqual(tag.bpm, 99)
//        XCTAssertEqual(tag.isrc, 123456789012)
//        XCTAssertEqual(tag.length, 5250)
        #warning("compilation flag shouldn't be nil I don't think?")
//        XCTAssertEqual(tag.compliation, true)
        XCTAssertEqual(tag.discNumber.disc, 3)
        XCTAssertEqual(tag.discNumber.totalDiscs, 4)
        XCTAssertEqual(tag.trackNumber.track, 1)
        XCTAssertEqual(tag.trackNumber.totalTracks, 2)
//        XCTAssertEqual(tag.languages,["eng"])
//        XCTAssertEqual(tag.userDefinedText.description, "UserText")
//        XCTAssertEqual(tag.userDefinedText.content, "User Defined Text Content")
//        XCTAssertEqual(tag.userDefinedWebpage.description, "UserDefinedURL")
//        XCTAssertEqual(tag.userDefinedWebpage.content, "http://userdefined.url")
        #warning("these shouldn't both be nil, genreDescription should be 'Genre'")
        XCTAssertEqual(tag.genre.genreName, nil)
        XCTAssertEqual(tag.genre.genreDescription, nil)
//        XCTAssertEqual(tag.mediaType.mediaType, nil)
//        XCTAssertEqual(tag.mediaType.additionalMediaInfo, nil)
//        XCTAssertEqual(tag.mediaType.mediaTypeDescription, nil)
//        XCTAssertEqual(tag.comments.language, "eng")
//        XCTAssertEqual(tag.comments.description, "CommentDescription")
//        XCTAssertEqual(tag.comments.comment, "Comment Content")
//        XCTAssertEqual(tag.lyrics.language, "eng")
//        XCTAssertEqual(tag.lyrics.description, "LyricsDesscription")
//        XCTAssertEqual(tag.lyrics.lyrics, "Lyrics Content")
//        XCTAssertEqual(tag.involvedPeopleList[0].role, "Director")
//        XCTAssertEqual(tag.involvedPeopleList[0].person, "Director Name")
//        XCTAssertEqual(tag.involvedPeopleList[1].role, "Producer")
//        XCTAssertEqual(tag.involvedPeopleList[1].person, "Producer Name")
        XCTAssertEqual(tag.year,"2019")
        
    }

    func testReadV23() throws {
        let mp3File = try Bundle.mp3V23()
        let tag = try mp3File.read()

        XCTAssertEqual(tag.album, "Album")
        XCTAssertEqual(tag.albumArtist, "AlbumArtist")
        XCTAssertEqual(tag.albumSort, "SortAlbum")
        XCTAssertEqual(tag.albumArtistSort, "SortAlbumArtist")
        XCTAssertEqual(tag.artist, "Artist")
        XCTAssertEqual(tag.artistSort, "SortArtist")
        XCTAssertEqual(tag.artistWebpage, "http://artist.url")
        XCTAssertEqual(tag.arranger, "Arranger")
        XCTAssertEqual(tag.composer, "Composer")
        XCTAssertEqual(tag.composerSort, "SortComposer")
        XCTAssertEqual(tag.conductor, "Conductor")
        XCTAssertEqual(tag.contentGroup, "Grouping")
        XCTAssertEqual(tag.copyright, "Copyright")
        XCTAssertEqual(tag.encodedBy, "EncodedBy")
        XCTAssertEqual(tag.encodingSettings, "EncoderSettings")
        XCTAssertEqual(tag.fileOwner, "FileOwner")
        XCTAssertEqual(tag.initialKey, "b#")
        XCTAssertEqual(tag.lyricist, "Lyricist")
        XCTAssertEqual(tag.movementName, "MovementName")
        XCTAssertEqual(tag.originalAlbum, "OriginalAlbum")
        XCTAssertEqual(tag.originalArtist, "OriginalArtist")
        XCTAssertEqual(tag.originalFilename, "OriginalFilename")
        XCTAssertEqual(tag.originalLyricist, "OriginalLyricist")
        XCTAssertEqual(tag.publisher, "Publisher")
        XCTAssertEqual(tag.radioStation, "RadioStation")
        XCTAssertEqual(tag.radioStationOwner, "RadioStationOwner")
        XCTAssertEqual(tag.title, "Title")
        XCTAssertEqual(tag.titleSort, "SortTitle")
        XCTAssertEqual(tag.audioFileWebpage, "http://audiofile.url")
        XCTAssertEqual(tag.audioSourceWebpage, "http://audiosource.url")
        XCTAssertEqual(tag.copyrightWebpage, "http://copyright.url")
        XCTAssertEqual(tag.publisherWebpage, "http://publisher.url")
        XCTAssertEqual(tag.radioStationWebpage, "http://radiostation.url")
        XCTAssertEqual(tag.bpm, 99)
        XCTAssertEqual(tag.isrc, 123456789012)
        XCTAssertEqual(tag.length, 5250)
        XCTAssertEqual(tag.movementCount, 6)
        XCTAssertEqual(tag.movementNumber, 0)
        XCTAssertEqual(tag.playlistDelay, 20)
        XCTAssertEqual(tag.compliation, true)
        XCTAssertEqual(tag.discNumber.disc, 3)
        XCTAssertEqual(tag.discNumber.totalDiscs, 4)
        XCTAssertEqual(tag.trackNumber.track, 1)
        XCTAssertEqual(tag.trackNumber.totalTracks, 2)
        XCTAssertEqual(tag.languages,["eng"])
        XCTAssertEqual(tag.userDefinedText.description, "UserText")
        XCTAssertEqual(tag.userDefinedText.content, "User Defined Text Content")
        XCTAssertEqual(tag.userDefinedWebpage.description, "UserDefinedURL")
        XCTAssertEqual(tag.userDefinedWebpage.content, "http://userdefined.url")
        #warning("these shouldn't both be nil, genreDescription should be 'Genre'")
        XCTAssertEqual(tag.genre.genreName, "")
        XCTAssertEqual(tag.genre.genreDescription, "Test Genre")
        XCTAssertEqual(tag.mediaType.mediaType, nil)
        XCTAssertEqual(tag.mediaType.additionalMediaInfo, nil)
        XCTAssertEqual(tag.mediaType.mediaTypeDescription, "MediaType")
        XCTAssertEqual(tag.comments.language, "eng")
        XCTAssertEqual(tag.comments.description, "CommentDescription")
        XCTAssertEqual(tag.comments.comment, "Comment Content")
        XCTAssertEqual(tag.lyrics.language, "eng")
        XCTAssertEqual(tag.lyrics.description, "LyricsDesscription")
        XCTAssertEqual(tag.lyrics.lyrics, "Lyrics Content")
        XCTAssertEqual(tag.involvedPeopleList[0].role, "Director")
        XCTAssertEqual(tag.involvedPeopleList[0].person, "Director Name")
        XCTAssertEqual(tag.involvedPeopleList[1].role, "Producer")
        XCTAssertEqual(tag.involvedPeopleList[1].person, "Producer Name")
//        XCTAssertEqual(tag.year,"2019")

    }

    func testReadV24() throws {
        let mp3File = try Bundle.mp3V24()
        let tag = try mp3File.read()
        
        XCTAssertEqual(tag.album, "Album")
        XCTAssertEqual(tag.albumArtist, "AlbumArtist")
        XCTAssertEqual(tag.albumSort, "SortAlbum")
        XCTAssertEqual(tag.albumArtistSort, "SortAlbumArtist")
        XCTAssertEqual(tag.artist, "Artist")
        XCTAssertEqual(tag.artistSort, "SortArtist")
        XCTAssertEqual(tag.artistWebpage, "http://artist.url")
        XCTAssertEqual(tag.arranger, "Arranger")
        XCTAssertEqual(tag.composer, "Composer")
        XCTAssertEqual(tag.composerSort, "SortComposer")
        XCTAssertEqual(tag.conductor, "Conductor")
        XCTAssertEqual(tag.contentGroup, "Grouping")
        XCTAssertEqual(tag.copyright, "Copyright")
        XCTAssertEqual(tag.encodedBy, "EncodedBy")
        XCTAssertEqual(tag.encodingSettings, "EncoderSettings")
        XCTAssertEqual(tag.fileOwner, "FileOwner")
        XCTAssertEqual(tag.initialKey, "b#")
        XCTAssertEqual(tag.lyricist, "Lyricist")
        XCTAssertEqual(tag.movementName, "MovementName")
        XCTAssertEqual(tag.originalAlbum, "OriginalAlbum")
        XCTAssertEqual(tag.originalArtist, "OriginalArtist")
        XCTAssertEqual(tag.originalFilename, "OriginalFilename")
        XCTAssertEqual(tag.originalLyricist, "OriginalLyricist")
        XCTAssertEqual(tag.publisher, "Publisher")
        XCTAssertEqual(tag.radioStation, "RadioStation")
        XCTAssertEqual(tag.radioStationOwner, "RadioStationOwner")
        XCTAssertEqual(tag.title, "Title")
        XCTAssertEqual(tag.titleSort, "SortTitle")
        XCTAssertEqual(tag.audioFileWebpage, "http://audiofile.url")
        XCTAssertEqual(tag.audioSourceWebpage, "http://audiosource.url")
        XCTAssertEqual(tag.copyrightWebpage, "http://copyright.url")
        XCTAssertEqual(tag.publisherWebpage, "http://publisher.url")
        XCTAssertEqual(tag.radioStationWebpage, "http://radiostation.url")
        XCTAssertEqual(tag.bpm, 99)
        XCTAssertEqual(tag.isrc, 123456789012)
        XCTAssertEqual(tag.length, 5250)
        XCTAssertEqual(tag.playlistDelay, 20)
        XCTAssertEqual(tag.compliation, true)
        XCTAssertEqual(tag.discNumber.disc, 3)
        XCTAssertEqual(tag.discNumber.totalDiscs, 4)
        XCTAssertEqual(tag.trackNumber.track, 1)
        XCTAssertEqual(tag.trackNumber.totalTracks, 2)
        XCTAssertEqual(tag.languages,["eng"])
        XCTAssertEqual(tag.userDefinedText.description, "UserText")
        XCTAssertEqual(tag.userDefinedText.content, "User Defined Text Content")
        XCTAssertEqual(tag.userDefinedWebpage.description, "UserDefinedUrl")
        XCTAssertEqual(tag.userDefinedWebpage.content, "http://userdefined.url")
        XCTAssertEqual(tag.genre.genreName, "")
        XCTAssertEqual(tag.genre.genreDescription, "Test Genre")
        XCTAssertEqual(tag.mediaType.mediaType, nil)
        XCTAssertEqual(tag.mediaType.additionalMediaInfo, nil)
        XCTAssertEqual(tag.mediaType.mediaTypeDescription, "MediaType")
        XCTAssertEqual(tag.comments.language, "eng")
        XCTAssertEqual(tag.comments.description, "CommentDescription")
        XCTAssertEqual(tag.comments.comment, "Comment Content")
        XCTAssertEqual(tag.lyrics.language, "eng")
        XCTAssertEqual(tag.lyrics.description, "LyricsDesscription")
        XCTAssertEqual(tag.lyrics.lyrics, "Lyrics Content")
        XCTAssertEqual(tag.involvedPeopleList[0].role, "Director")
        XCTAssertEqual(tag.involvedPeopleList[0].person, "Director Name")
        XCTAssertEqual(tag.involvedPeopleList[1].role, "Producer")
        XCTAssertEqual(tag.involvedPeopleList[1].person, "Producer Name")
        XCTAssertEqual(tag.musicianCreditList[0].role,"Musician")
        XCTAssertEqual(tag.musicianCreditList[0].person,"Musician Name")
        XCTAssertEqual(tag.musicianCreditList[1].role, "Singer")
        XCTAssertEqual(tag.musicianCreditList[1].person, "Singer Name")
        XCTAssertEqual(tag.releaseDateTime, "1999-05-08")
        XCTAssertEqual(tag.originalReleaseDate, "1998-03-04")
        XCTAssertEqual(tag.taggingDateTime, "1997-06-07")
        XCTAssertEqual(tag.mood, "Mood")
        XCTAssertEqual(tag.setSubtitle, "SetSubtitle")
        XCTAssertEqual(tag.producedNotice, "2020 ProducedNotice")
    }

    func testChapterReading() throws {
        let mp3File = try Bundle.mp3Chaptered()
        let tag = try mp3File.read()
        print(tag)

        XCTAssertEqual(tag.album, "Album")
        XCTAssertEqual(tag.albumArtist, "AlbumArtist")
        XCTAssertEqual(tag.albumSort, "SortAlbum")
        XCTAssertEqual(tag.albumArtistSort, "SortAlbumArtist")
        XCTAssertEqual(tag.artist, "Artist")
        XCTAssertEqual(tag.artistSort, "SortArtist")
        XCTAssertEqual(tag.artistWebpage, "http://artist.url")
        XCTAssertEqual(tag.arranger, "Arranger")
        XCTAssertEqual(tag.composer, "Composer")
        XCTAssertEqual(tag.composerSort, "SortComposer")
        XCTAssertEqual(tag.conductor, "Conductor")
        XCTAssertEqual(tag.contentGroup, "Content Group")
        XCTAssertEqual(tag.copyright, "2020 Copyright")
        XCTAssertEqual(tag.encodedBy, "EncodedBy")
        XCTAssertEqual(tag.encodingSettings, "EncoderSettings")
        XCTAssertEqual(tag.fileOwner, "FileOwner")
        XCTAssertEqual(tag.initialKey, "b#")
        XCTAssertEqual(tag.lyricist, "Lyricist")
        XCTAssertEqual(tag.movementName, "MovementName")
        XCTAssertEqual(tag.originalAlbum, "OriginalAlbum")
        XCTAssertEqual(tag.originalArtist, "OriginalArtist")
        XCTAssertEqual(tag.originalFilename, "OriginalFilename")
        XCTAssertEqual(tag.originalLyricist, "OriginalLyricist")
        XCTAssertEqual(tag.publisher, "Publisher")
        XCTAssertEqual(tag.radioStation, "RadioStation")
        XCTAssertEqual(tag.radioStationOwner, "RadioStationOwner")
        XCTAssertEqual(tag.title, "Album")
        XCTAssertEqual(tag.titleSort, "SortTitle")
        XCTAssertEqual(tag.audioFileWebpage, "http://audiofile.url")
        XCTAssertEqual(tag.audioSourceWebpage, "http://audiosource.url")
        XCTAssertEqual(tag.copyrightWebpage, "http://copyright.url")
        XCTAssertEqual(tag.publisherWebpage, "http://publisher.url")
        XCTAssertEqual(tag.radioStationWebpage, "http://radiostation.url")
        XCTAssertEqual(tag.bpm, 99)
        XCTAssertEqual(tag.isrc, 123456789012)
        XCTAssertEqual(tag.length, 5250)
        XCTAssertEqual(tag.playlistDelay, 20)
        XCTAssertEqual(tag.compliation, true)
        XCTAssertEqual(tag.discNumber.disc, 3)
        XCTAssertEqual(tag.discNumber.totalDiscs, 4)
        XCTAssertEqual(tag.trackNumber.track, 1)
        XCTAssertEqual(tag.trackNumber.totalTracks, 2)
        XCTAssertEqual(tag.languages,["eng"])
        XCTAssertEqual(tag.userDefinedText.description, "UserDefinedText")
        XCTAssertEqual(tag.userDefinedText.content, "User Defined Text Content")
        XCTAssertEqual(tag.userDefinedWebpage.description, "UserDefinedUrl")
        XCTAssertEqual(tag.userDefinedWebpage.content, "http://userdefined.url")
        XCTAssertEqual(tag.genre.genreName, "")
        XCTAssertEqual(tag.genre.genreDescription, "Genre")
        XCTAssertEqual(tag.mediaType.mediaType, nil)
        XCTAssertEqual(tag.mediaType.additionalMediaInfo, nil)
        XCTAssertEqual(tag.mediaType.mediaTypeDescription, "MediaType")
        XCTAssertEqual(tag.comments.language, "eng")
        XCTAssertEqual(tag.comments.description, "CommentDescription")
        XCTAssertEqual(tag.comments.comment, "Comment Content")
        XCTAssertEqual(tag.lyrics.language, "eng")
        XCTAssertEqual(tag.lyrics.description, "LyricsDescription")
        XCTAssertEqual(tag.lyrics.lyrics, "Lyrics Content")
        XCTAssertEqual(tag.involvedPeopleList[0].role, "Director")
        XCTAssertEqual(tag.involvedPeopleList[0].person, "Director Name")
        XCTAssertEqual(tag.involvedPeopleList[1].role, "Producer")
        XCTAssertEqual(tag.involvedPeopleList[1].person, "Producer Name")
        XCTAssertEqual(tag.musicianCreditList[0].role,"Musician")
        XCTAssertEqual(tag.musicianCreditList[0].person,"Musician Name")
        XCTAssertEqual(tag.musicianCreditList[1].role, "Singer")
        XCTAssertEqual(tag.musicianCreditList[1].person, "Singer Name")
        XCTAssertEqual(tag.releaseDateTime, "1999-05-08")
        XCTAssertEqual(tag.originalReleaseDate, "1998-03-04")
        XCTAssertEqual(tag.taggingDateTime, "1997-06-07")
        XCTAssertEqual(tag.encodingDateTime, "1996-08-09")
        XCTAssertEqual(tag.mood, "Mood")
        XCTAssertEqual(tag.setSubtitle, "SetSubtitle")
        XCTAssertEqual(tag.producedNotice, "2020 ProducedNotice")
        /*
         SwiftTagger_MacOS.FrameKey.tableOfContents(elementID: "TOC"): SwiftTagger_MacOS.Frame.tocFrame(SwiftTagger_MacOS.TableOfContentsFrame(elementID: "TOC", topLevelFlag: true, orderedFlag: true, entryCount: 2, childElementIDs: ["ch0", "ch1"], embeddedSubframes: [:], flags: 2 bytes, layout: SwiftTagger_MacOS.FrameLayoutIdentifier.known(SwiftTagger_MacOS.KnownFrameLayoutIdentifier.tableOfContents), frameKey: SwiftTagger_MacOS.FrameKey.tableOfContents(elementID: "TOC")))
         */
        XCTAssertEqual(tag.tableOfContents?.elementID, "TOC")
        XCTAssertEqual(tag.tableOfContents?.topLevelFlag, true)
        XCTAssertEqual(tag.tableOfContents?.orderedFlag, true)
        XCTAssertEqual(tag.tableOfContents?.entryCount, 2)
        XCTAssertEqual(tag.tableOfContents?.childElementIDList, ["ch0","ch1"])
        
        /*
         SwiftTagger_MacOS.FrameKey.chapter(elementID: "ch0"): SwiftTagger_MacOS.Frame.chapterFrame(SwiftTagger_MacOS.ChapterFrame(elementID: "ch0", startTime: 0, endTime: 2795, startByteOffset: 0, endByteOffset: 0, embeddedSubframes: [SwiftTagger_MacOS.FrameKey.title: SwiftTagger_MacOS.Frame.stringFrame(SwiftTagger_MacOS.StringFrame(flags: 2 bytes, layout: SwiftTagger_MacOS.FrameLayoutIdentifier.known(SwiftTagger_MacOS.KnownFrameLayoutIdentifier.title), frameKey: SwiftTagger_MacOS.FrameKey.title, contentString: "Chapter 01"))], flags: 2 bytes, layout: SwiftTagger_MacOS.FrameLayoutIdentifier.known(SwiftTagger_MacOS.KnownFrameLayoutIdentifier.chapter), frameKey: SwiftTagger_MacOS.FrameKey.chapter(elementID: "ch0")))
         SwiftTagger_MacOS.FrameKey.chapter(elementID: "ch1"): SwiftTagger_MacOS.Frame.chapterFrame(SwiftTagger_MacOS.ChapterFrame(elementID: "ch1", startTime: 2795, endTime: 5250, startByteOffset: 0, endByteOffset: 0, embeddedSubframes: [SwiftTagger_MacOS.FrameKey.title: SwiftTagger_MacOS.Frame.stringFrame(SwiftTagger_MacOS.StringFrame(flags: 2 bytes, layout: SwiftTagger_MacOS.FrameLayoutIdentifier.known(SwiftTagger_MacOS.KnownFrameLayoutIdentifier.title), frameKey: SwiftTagger_MacOS.FrameKey.title, contentString: "Chapter 02"))], flags: 2 bytes, layout: SwiftTagger_MacOS.FrameLayoutIdentifier.known(SwiftTagger_MacOS.KnownFrameLayoutIdentifier.chapter), frameKey: SwiftTagger_MacOS.FrameKey.chapter(elementID: "ch1"))),
         */
        let chapter1: ChapterFrame = ChapterFrame(chapterTitle: "Chapter 01", startTime: 0, endTime: 2795)
        let chapter2: ChapterFrame = ChapterFrame(chapterTitle: "Chapter 02", startTime: 2795, endTime: 5250)
    }
}
